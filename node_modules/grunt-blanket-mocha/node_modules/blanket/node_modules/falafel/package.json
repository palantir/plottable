{
  "name": "falafel",
  "description": "transform the ast on a recursive walk",
  "version": "0.1.6",
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/node-falafel.git"
  },
  "main": "index.js",
  "keywords": [
    "ast",
    "source",
    "traversal",
    "syntax",
    "tree",
    "burrito"
  ],
  "directories": {
    "example": "example",
    "test": "test"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "dependencies": {
    "esprima": "~1.0.2"
  },
  "devDependencies": {
    "tape": "~0.0.2",
    "tap": "~0.3.0"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "license": "MIT",
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": {
      "iexplore": [
        "6.0",
        "7.0",
        "8.0",
        "9.0"
      ],
      "chrome": [
        "20.0"
      ],
      "firefox": [
        "10.0",
        "15.0"
      ],
      "safari": [
        "5.1"
      ],
      "opera": [
        "12.0"
      ]
    }
  },
  "readme": "# falafel\n\nTransform the [ast](http://en.wikipedia.org/wiki/Abstract_syntax_tree) on a\nrecursive walk.\n\n[![browser support](http://ci.testling.com/substack/node-falafel.png)](http://ci.testling.com/substack/node-falafel)\n\n[![build status](https://secure.travis-ci.org/substack/node-falafel.png)](http://travis-ci.org/substack/node-falafel)\n\nThis module is like [burrito](https://github.com/substack/node-burrito),\nexcept that it uses [esprima](http://esprima.org) instead of\n[uglify](https://github.com/mishoo/UglifyJS)\nfor friendlier-looking ast nodes.\n\n# example\n\n## array.js\n\nPut a function wrapper around all array literals.\n\n``` js\nvar falafel = require('falafel');\n\nvar src = '(' + function () {\n    var xs = [ 1, 2, [ 3, 4 ] ];\n    var ys = [ 5, 6 ];\n    console.dir([ xs, ys ]);\n} + ')()';\n\nvar output = falafel(src, function (node) {\n    if (node.type === 'ArrayExpression') {\n        node.update('fn(' + node.source() + ')');\n    }\n});\nconsole.log(output);\n```\n\noutput:\n\n```\n(function () {\n    var xs = fn([ 1, 2, fn([ 3, 4 ]) ]);\n    var ys = fn([ 5, 6 ]);\n    console.dir(fn([ xs, ys ]));\n})()\n```\n\n# methods\n\n``` js\nvar falafel = require('falafel')\n```\n\n## falafel(src, opts={}, fn)\n\nTransform the string source `src` with the function `fn`, returning a\nstring-like transformed output object.\n\nFor every node in the ast, `fn(node)` fires. The recursive walk is a\npre-traversal, so children get called before their parents.\n\nPerforming a pre-traversal makes it easier to write nested transforms since\ntransforming parents often requires transforming all its children first.\n\nThe return value is string-like (it defines `.toString()` and `.inspect()`) so\nthat you can call `node.update()` asynchronously after the function has\nreturned and still capture the output.\n\nInstead of passing a `src` you can also use `opts.source`.\n\nAll of the `opts` will be passed directly to esprima except for `'range'` which\nis always turned on because falafel needs it.\n\nSome of the options you might want from esprima includes:\n`'loc'`, `'raw'`, `'comments'`, `'tokens'`, and `'tolerant'`.\n\n# nodes\n\nAside from the regular [esprima](http://esprima.org) data, you can also call\nsome inserted methods on nodes.\n\nAside from updating the current node, you can also reach into sub-nodes to call\nupdate functions on children from parent nodes.\n\n## node.source()\n\nReturn the source for the given node, including any modifications made to\nchildren nodes.\n\n## node.update(s)\n\nTransform the source for the present node to the string `s`.\n\nNote that in `'ForStatement'` node types, there is an existing subnode called\n`update`. For those nodes all the properties are copied over onto the\n`node.update()` function.\n\n## node.parent\n\nReference to the parent element or `null` at the root element.\n\n# install\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install falafel\n```\n\n# license\n\nMIT\n\n",
  "readmeFilename": "README.markdown",
  "bugs": {
    "url": "https://github.com/substack/node-falafel/issues"
  },
  "homepage": "https://github.com/substack/node-falafel",
  "_id": "falafel@0.1.6",
  "_shasum": "3084cf3d41b59d15c813be6f259557fdc82b0660",
  "_resolved": "https://sj-npm-01.yojoe.local/falafel/-/falafel-0.1.6.tgz",
  "_from": "falafel@>=0.1.6 <0.2.0"
}
