///<reference path="../reference.ts" />

module Plottable {
export module Component {
  /*
   * An abstract ComponentContainer class to encapsulate Table and ComponentGroup's shared functionality.
   * It will not do anything if instantiated directly.
   */
  export class AbstractComponentContainer extends AbstractComponent {
    protected _components: AbstractComponent[] = [];

    public _anchor(element: D3.Selection) {
      super._anchor(element);
      this.components().forEach((c) => c._anchor(this._content));
    }

    public _render() {
      this._components.forEach((c) => c._render());
    }

    public _removeComponent(c: AbstractComponent) {
      var removeIndex = this._components.indexOf(c);
      if (removeIndex >= 0) {
        this.components().splice(removeIndex, 1);
        this._invalidateLayout();
      }
    }

    public _addComponent(c: AbstractComponent, prepend = false): boolean {
      if (!c || this._components.indexOf(c) >= 0) {
        return false;
      }

      if (prepend) {
        this.components().unshift(c);
      } else {
        this.components().push(c);
      }
      c._parent = this;
      if (this._isAnchored) {
        c._anchor(this._content);
      }
      this._invalidateLayout();
      return true;
    }

    /**
     * Returns a list of components in the ComponentContainer.
     *
     * @returns {Component[]} the contained Components
     */
    public components(): AbstractComponent[] {
      return this._components;
    }

    /**
     * Returns true iff the ComponentContainer is empty.
     *
     * @returns {boolean} Whether the calling ComponentContainer is empty.
     */
    public empty() {
      return this._components.length === 0;
    }

    /**
     * Detaches all components contained in the ComponentContainer, and
     * empties the ComponentContainer.
     *
     * @returns {ComponentContainer} The calling ComponentContainer
     */
    public detachAll() {
      // Calling c.remove() will mutate this._components because the component will call this._parent._removeComponent(this)
      // Since mutating an array while iterating over it is dangerous, we instead iterate over a copy generated by Arr.slice()
      this.components().slice().forEach((c: AbstractComponent) => c.detach());
      return this;
    }

    public remove() {
      super.remove();
      this.components().slice().forEach((c: AbstractComponent) => c.remove());
    }

    public _useLastCalculatedLayout(): boolean;
    public _useLastCalculatedLayout(calculated: boolean) : AbstractComponent;
    public _useLastCalculatedLayout(calculated?: boolean) : any {
      if (calculated != null) {
        this.components().slice().forEach((c: AbstractComponent) => c._useLastCalculatedLayout(calculated));
      }
      return super._useLastCalculatedLayout(calculated);
    }
  }
}
}
